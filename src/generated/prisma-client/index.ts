// Code generated by Prisma (prisma@1.22.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode, GraphQLSchema } from "graphql";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  donor: (where?: DonorWhereInput) => Promise<boolean>;
  offer: (where?: OfferWhereInput) => Promise<boolean>;
  offerItem: (where?: OfferItemWhereInput) => Promise<boolean>;
  plant: (where?: PlantWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  donor: (where: DonorWhereUniqueInput) => DonorPromise;
  donors: (
    args?: {
      where?: DonorWhereInput;
      orderBy?: DonorOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Donor>;
  donorsConnection: (
    args?: {
      where?: DonorWhereInput;
      orderBy?: DonorOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => DonorConnectionPromise;
  offer: (where: OfferWhereUniqueInput) => OfferPromise;
  offers: (
    args?: {
      where?: OfferWhereInput;
      orderBy?: OfferOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Offer>;
  offersConnection: (
    args?: {
      where?: OfferWhereInput;
      orderBy?: OfferOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => OfferConnectionPromise;
  offerItem: (where: OfferItemWhereUniqueInput) => OfferItemPromise;
  offerItems: (
    args?: {
      where?: OfferItemWhereInput;
      orderBy?: OfferItemOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<OfferItem>;
  offerItemsConnection: (
    args?: {
      where?: OfferItemWhereInput;
      orderBy?: OfferItemOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => OfferItemConnectionPromise;
  plant: (where: PlantWhereUniqueInput) => PlantPromise;
  plants: (
    args?: {
      where?: PlantWhereInput;
      orderBy?: PlantOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Plant>;
  plantsConnection: (
    args?: {
      where?: PlantWhereInput;
      orderBy?: PlantOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PlantConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createDonor: (data: DonorCreateInput) => DonorPromise;
  updateDonor: (
    args: { data: DonorUpdateInput; where: DonorWhereUniqueInput }
  ) => DonorPromise;
  updateManyDonors: (
    args: { data: DonorUpdateManyMutationInput; where?: DonorWhereInput }
  ) => BatchPayloadPromise;
  upsertDonor: (
    args: {
      where: DonorWhereUniqueInput;
      create: DonorCreateInput;
      update: DonorUpdateInput;
    }
  ) => DonorPromise;
  deleteDonor: (where: DonorWhereUniqueInput) => DonorPromise;
  deleteManyDonors: (where?: DonorWhereInput) => BatchPayloadPromise;
  createOffer: (data: OfferCreateInput) => OfferPromise;
  updateOffer: (
    args: { data: OfferUpdateInput; where: OfferWhereUniqueInput }
  ) => OfferPromise;
  updateManyOffers: (
    args: { data: OfferUpdateManyMutationInput; where?: OfferWhereInput }
  ) => BatchPayloadPromise;
  upsertOffer: (
    args: {
      where: OfferWhereUniqueInput;
      create: OfferCreateInput;
      update: OfferUpdateInput;
    }
  ) => OfferPromise;
  deleteOffer: (where: OfferWhereUniqueInput) => OfferPromise;
  deleteManyOffers: (where?: OfferWhereInput) => BatchPayloadPromise;
  createOfferItem: (data: OfferItemCreateInput) => OfferItemPromise;
  updateOfferItem: (
    args: { data: OfferItemUpdateInput; where: OfferItemWhereUniqueInput }
  ) => OfferItemPromise;
  upsertOfferItem: (
    args: {
      where: OfferItemWhereUniqueInput;
      create: OfferItemCreateInput;
      update: OfferItemUpdateInput;
    }
  ) => OfferItemPromise;
  deleteOfferItem: (where: OfferItemWhereUniqueInput) => OfferItemPromise;
  deleteManyOfferItems: (where?: OfferItemWhereInput) => BatchPayloadPromise;
  createPlant: (data: PlantCreateInput) => PlantPromise;
  updatePlant: (
    args: { data: PlantUpdateInput; where: PlantWhereUniqueInput }
  ) => PlantPromise;
  updateManyPlants: (
    args: { data: PlantUpdateManyMutationInput; where?: PlantWhereInput }
  ) => BatchPayloadPromise;
  upsertPlant: (
    args: {
      where: PlantWhereUniqueInput;
      create: PlantCreateInput;
      update: PlantUpdateInput;
    }
  ) => PlantPromise;
  deletePlant: (where: PlantWhereUniqueInput) => PlantPromise;
  deleteManyPlants: (where?: PlantWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  donor: (
    where?: DonorSubscriptionWhereInput
  ) => DonorSubscriptionPayloadSubscription;
  offer: (
    where?: OfferSubscriptionWhereInput
  ) => OfferSubscriptionPayloadSubscription;
  offerItem: (
    where?: OfferItemSubscriptionWhereInput
  ) => OfferItemSubscriptionPayloadSubscription;
  plant: (
    where?: PlantSubscriptionWhereInput
  ) => PlantSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type OfferOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type DonorOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "number_ASC"
  | "number_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type OfferItemOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PlantOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Role = "ADMIN" | "USER";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "name_ASC"
  | "name_DESC"
  | "role_ASC"
  | "role_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface OfferItemUpdateWithoutOfferDataInput {
  donors?: DonorUpdateManyWithoutOfferItemsInput;
  plant?: PlantUpdateOneRequiredWithoutOfferItemsInput;
}

export type DonorWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  number?: String;
}>;

export interface PlantCreateOneWithoutOfferItemsInput {
  create?: PlantCreateWithoutOfferItemsInput;
  connect?: PlantWhereUniqueInput;
}

export interface OfferUpsertWithoutItemsInput {
  update: OfferUpdateWithoutItemsDataInput;
  create: OfferCreateWithoutItemsInput;
}

export interface PlantCreateWithoutOfferItemsInput {
  name: String;
}

export interface DonorUpsertWithWhereUniqueWithoutOfferItemsInput {
  where: DonorWhereUniqueInput;
  update: DonorUpdateWithoutOfferItemsDataInput;
  create: DonorCreateWithoutOfferItemsInput;
}

export interface OfferItemCreateManyWithoutDonorsInput {
  create?:
    | OfferItemCreateWithoutDonorsInput[]
    | OfferItemCreateWithoutDonorsInput;
  connect?: OfferItemWhereUniqueInput[] | OfferItemWhereUniqueInput;
}

export interface OfferItemWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  offer?: OfferWhereInput;
  donors_every?: DonorWhereInput;
  donors_some?: DonorWhereInput;
  donors_none?: DonorWhereInput;
  plant?: PlantWhereInput;
  AND?: OfferItemWhereInput[] | OfferItemWhereInput;
  OR?: OfferItemWhereInput[] | OfferItemWhereInput;
  NOT?: OfferItemWhereInput[] | OfferItemWhereInput;
}

export interface OfferItemCreateWithoutDonorsInput {
  offer: OfferCreateOneWithoutItemsInput;
  plant: PlantCreateOneWithoutOfferItemsInput;
}

export interface PlantSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PlantWhereInput;
  AND?: PlantSubscriptionWhereInput[] | PlantSubscriptionWhereInput;
  OR?: PlantSubscriptionWhereInput[] | PlantSubscriptionWhereInput;
  NOT?: PlantSubscriptionWhereInput[] | PlantSubscriptionWhereInput;
}

export interface OfferCreateOneWithoutItemsInput {
  create?: OfferCreateWithoutItemsInput;
  connect?: OfferWhereUniqueInput;
}

export interface OfferSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: OfferWhereInput;
  AND?: OfferSubscriptionWhereInput[] | OfferSubscriptionWhereInput;
  OR?: OfferSubscriptionWhereInput[] | OfferSubscriptionWhereInput;
  NOT?: OfferSubscriptionWhereInput[] | OfferSubscriptionWhereInput;
}

export interface OfferCreateWithoutItemsInput {
  name: String;
  donors?: DonorCreateManyWithoutOffersInput;
}

export interface UserUpdateManyMutationInput {
  email?: String;
  password?: String;
  name?: String;
  role?: Role;
}

export interface DonorCreateManyWithoutOffersInput {
  create?: DonorCreateWithoutOffersInput[] | DonorCreateWithoutOffersInput;
  connect?: DonorWhereUniqueInput[] | DonorWhereUniqueInput;
}

export type OfferWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface DonorCreateWithoutOffersInput {
  number: String;
  name: String;
  OfferItems?: OfferItemCreateManyWithoutDonorsInput;
}

export interface PlantUpdateManyMutationInput {
  name?: String;
}

export interface DonorUpdateInput {
  number?: String;
  name?: String;
  offers?: OfferUpdateManyWithoutDonorsInput;
  OfferItems?: OfferItemUpdateManyWithoutDonorsInput;
}

export type OfferItemWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface OfferUpdateManyWithoutDonorsInput {
  create?: OfferCreateWithoutDonorsInput[] | OfferCreateWithoutDonorsInput;
  delete?: OfferWhereUniqueInput[] | OfferWhereUniqueInput;
  connect?: OfferWhereUniqueInput[] | OfferWhereUniqueInput;
  disconnect?: OfferWhereUniqueInput[] | OfferWhereUniqueInput;
  update?:
    | OfferUpdateWithWhereUniqueWithoutDonorsInput[]
    | OfferUpdateWithWhereUniqueWithoutDonorsInput;
  upsert?:
    | OfferUpsertWithWhereUniqueWithoutDonorsInput[]
    | OfferUpsertWithWhereUniqueWithoutDonorsInput;
  deleteMany?: OfferScalarWhereInput[] | OfferScalarWhereInput;
  updateMany?:
    | OfferUpdateManyWithWhereNestedInput[]
    | OfferUpdateManyWithWhereNestedInput;
}

export interface OfferItemUpdateWithWhereUniqueWithoutPlantInput {
  where: OfferItemWhereUniqueInput;
  data: OfferItemUpdateWithoutPlantDataInput;
}

export interface OfferUpdateWithWhereUniqueWithoutDonorsInput {
  where: OfferWhereUniqueInput;
  data: OfferUpdateWithoutDonorsDataInput;
}

export type PlantWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  name?: String;
}>;

export interface OfferUpdateWithoutDonorsDataInput {
  name?: String;
  items?: OfferItemUpdateManyWithoutOfferInput;
}

export interface PlantUpdateInput {
  name?: String;
  offerItems?: OfferItemUpdateManyWithoutPlantInput;
}

export interface OfferItemUpdateManyWithoutOfferInput {
  create?:
    | OfferItemCreateWithoutOfferInput[]
    | OfferItemCreateWithoutOfferInput;
  delete?: OfferItemWhereUniqueInput[] | OfferItemWhereUniqueInput;
  connect?: OfferItemWhereUniqueInput[] | OfferItemWhereUniqueInput;
  disconnect?: OfferItemWhereUniqueInput[] | OfferItemWhereUniqueInput;
  update?:
    | OfferItemUpdateWithWhereUniqueWithoutOfferInput[]
    | OfferItemUpdateWithWhereUniqueWithoutOfferInput;
  upsert?:
    | OfferItemUpsertWithWhereUniqueWithoutOfferInput[]
    | OfferItemUpsertWithWhereUniqueWithoutOfferInput;
  deleteMany?: OfferItemScalarWhereInput[] | OfferItemScalarWhereInput;
}

export interface OfferItemCreateManyWithoutPlantInput {
  create?:
    | OfferItemCreateWithoutPlantInput[]
    | OfferItemCreateWithoutPlantInput;
  connect?: OfferItemWhereUniqueInput[] | OfferItemWhereUniqueInput;
}

export interface OfferItemUpdateWithWhereUniqueWithoutOfferInput {
  where: OfferItemWhereUniqueInput;
  data: OfferItemUpdateWithoutOfferDataInput;
}

export interface PlantCreateInput {
  name: String;
  offerItems?: OfferItemCreateManyWithoutPlantInput;
}

export interface DonorUpdateManyMutationInput {
  number?: String;
  name?: String;
}

export interface OfferItemUpdateInput {
  offer?: OfferUpdateOneRequiredWithoutItemsInput;
  donors?: DonorUpdateManyWithoutOfferItemsInput;
  plant?: PlantUpdateOneRequiredWithoutOfferItemsInput;
}

export interface DonorUpdateManyWithoutOfferItemsInput {
  create?:
    | DonorCreateWithoutOfferItemsInput[]
    | DonorCreateWithoutOfferItemsInput;
  delete?: DonorWhereUniqueInput[] | DonorWhereUniqueInput;
  connect?: DonorWhereUniqueInput[] | DonorWhereUniqueInput;
  disconnect?: DonorWhereUniqueInput[] | DonorWhereUniqueInput;
  update?:
    | DonorUpdateWithWhereUniqueWithoutOfferItemsInput[]
    | DonorUpdateWithWhereUniqueWithoutOfferItemsInput;
  upsert?:
    | DonorUpsertWithWhereUniqueWithoutOfferItemsInput[]
    | DonorUpsertWithWhereUniqueWithoutOfferItemsInput;
  deleteMany?: DonorScalarWhereInput[] | DonorScalarWhereInput;
  updateMany?:
    | DonorUpdateManyWithWhereNestedInput[]
    | DonorUpdateManyWithWhereNestedInput;
}

export interface OfferItemCreateInput {
  offer: OfferCreateOneWithoutItemsInput;
  donors?: DonorCreateManyWithoutOfferItemsInput;
  plant: PlantCreateOneWithoutOfferItemsInput;
}

export interface DonorUpdateWithWhereUniqueWithoutOfferItemsInput {
  where: DonorWhereUniqueInput;
  data: DonorUpdateWithoutOfferItemsDataInput;
}

export interface OfferUpdateInput {
  name?: String;
  donors?: DonorUpdateManyWithoutOffersInput;
  items?: OfferItemUpdateManyWithoutOfferInput;
}

export interface DonorUpdateWithoutOfferItemsDataInput {
  number?: String;
  name?: String;
  offers?: OfferUpdateManyWithoutDonorsInput;
}

export interface OfferCreateManyWithoutDonorsInput {
  create?: OfferCreateWithoutDonorsInput[] | OfferCreateWithoutDonorsInput;
  connect?: OfferWhereUniqueInput[] | OfferWhereUniqueInput;
}

export interface OfferItemUpsertWithWhereUniqueWithoutDonorsInput {
  where: OfferItemWhereUniqueInput;
  update: OfferItemUpdateWithoutDonorsDataInput;
  create: OfferItemCreateWithoutDonorsInput;
}

export interface OfferItemCreateManyWithoutOfferInput {
  create?:
    | OfferItemCreateWithoutOfferInput[]
    | OfferItemCreateWithoutOfferInput;
  connect?: OfferItemWhereUniqueInput[] | OfferItemWhereUniqueInput;
}

export interface DonorScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  number?: String;
  number_not?: String;
  number_in?: String[] | String;
  number_not_in?: String[] | String;
  number_lt?: String;
  number_lte?: String;
  number_gt?: String;
  number_gte?: String;
  number_contains?: String;
  number_not_contains?: String;
  number_starts_with?: String;
  number_not_starts_with?: String;
  number_ends_with?: String;
  number_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: DonorScalarWhereInput[] | DonorScalarWhereInput;
  OR?: DonorScalarWhereInput[] | DonorScalarWhereInput;
  NOT?: DonorScalarWhereInput[] | DonorScalarWhereInput;
}

export interface DonorCreateManyWithoutOfferItemsInput {
  create?:
    | DonorCreateWithoutOfferItemsInput[]
    | DonorCreateWithoutOfferItemsInput;
  connect?: DonorWhereUniqueInput[] | DonorWhereUniqueInput;
}

export interface DonorUpdateManyWithWhereNestedInput {
  where: DonorScalarWhereInput;
  data: DonorUpdateManyDataInput;
}

export interface PlantWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  offerItems_every?: OfferItemWhereInput;
  offerItems_some?: OfferItemWhereInput;
  offerItems_none?: OfferItemWhereInput;
  AND?: PlantWhereInput[] | PlantWhereInput;
  OR?: PlantWhereInput[] | PlantWhereInput;
  NOT?: PlantWhereInput[] | PlantWhereInput;
}

export interface DonorUpdateManyDataInput {
  number?: String;
  name?: String;
}

export interface OfferItemSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: OfferItemWhereInput;
  AND?: OfferItemSubscriptionWhereInput[] | OfferItemSubscriptionWhereInput;
  OR?: OfferItemSubscriptionWhereInput[] | OfferItemSubscriptionWhereInput;
  NOT?: OfferItemSubscriptionWhereInput[] | OfferItemSubscriptionWhereInput;
}

export interface PlantUpdateOneRequiredWithoutOfferItemsInput {
  create?: PlantCreateWithoutOfferItemsInput;
  update?: PlantUpdateWithoutOfferItemsDataInput;
  upsert?: PlantUpsertWithoutOfferItemsInput;
  connect?: PlantWhereUniqueInput;
}

export interface UserUpdateInput {
  email?: String;
  password?: String;
  name?: String;
  role?: Role;
}

export interface PlantUpdateWithoutOfferItemsDataInput {
  name?: String;
}

export interface OfferItemUpsertWithWhereUniqueWithoutPlantInput {
  where: OfferItemWhereUniqueInput;
  update: OfferItemUpdateWithoutPlantDataInput;
  create: OfferItemCreateWithoutPlantInput;
}

export interface PlantUpsertWithoutOfferItemsInput {
  update: PlantUpdateWithoutOfferItemsDataInput;
  create: PlantCreateWithoutOfferItemsInput;
}

export interface OfferItemUpdateManyWithoutPlantInput {
  create?:
    | OfferItemCreateWithoutPlantInput[]
    | OfferItemCreateWithoutPlantInput;
  delete?: OfferItemWhereUniqueInput[] | OfferItemWhereUniqueInput;
  connect?: OfferItemWhereUniqueInput[] | OfferItemWhereUniqueInput;
  disconnect?: OfferItemWhereUniqueInput[] | OfferItemWhereUniqueInput;
  update?:
    | OfferItemUpdateWithWhereUniqueWithoutPlantInput[]
    | OfferItemUpdateWithWhereUniqueWithoutPlantInput;
  upsert?:
    | OfferItemUpsertWithWhereUniqueWithoutPlantInput[]
    | OfferItemUpsertWithWhereUniqueWithoutPlantInput;
  deleteMany?: OfferItemScalarWhereInput[] | OfferItemScalarWhereInput;
}

export interface OfferItemUpsertWithWhereUniqueWithoutOfferInput {
  where: OfferItemWhereUniqueInput;
  update: OfferItemUpdateWithoutOfferDataInput;
  create: OfferItemCreateWithoutOfferInput;
}

export interface OfferItemCreateWithoutPlantInput {
  offer: OfferCreateOneWithoutItemsInput;
  donors?: DonorCreateManyWithoutOfferItemsInput;
}

export interface OfferItemScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  AND?: OfferItemScalarWhereInput[] | OfferItemScalarWhereInput;
  OR?: OfferItemScalarWhereInput[] | OfferItemScalarWhereInput;
  NOT?: OfferItemScalarWhereInput[] | OfferItemScalarWhereInput;
}

export interface OfferWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  donors_every?: DonorWhereInput;
  donors_some?: DonorWhereInput;
  donors_none?: DonorWhereInput;
  items_every?: OfferItemWhereInput;
  items_some?: OfferItemWhereInput;
  items_none?: OfferItemWhereInput;
  AND?: OfferWhereInput[] | OfferWhereInput;
  OR?: OfferWhereInput[] | OfferWhereInput;
  NOT?: OfferWhereInput[] | OfferWhereInput;
}

export interface OfferUpsertWithWhereUniqueWithoutDonorsInput {
  where: OfferWhereUniqueInput;
  update: OfferUpdateWithoutDonorsDataInput;
  create: OfferCreateWithoutDonorsInput;
}

export interface OfferUpdateManyMutationInput {
  name?: String;
}

export interface OfferScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: OfferScalarWhereInput[] | OfferScalarWhereInput;
  OR?: OfferScalarWhereInput[] | OfferScalarWhereInput;
  NOT?: OfferScalarWhereInput[] | OfferScalarWhereInput;
}

export interface DonorCreateInput {
  number: String;
  name: String;
  offers?: OfferCreateManyWithoutDonorsInput;
  OfferItems?: OfferItemCreateManyWithoutDonorsInput;
}

export interface OfferUpdateManyWithWhereNestedInput {
  where: OfferScalarWhereInput;
  data: OfferUpdateManyDataInput;
}

export interface OfferItemCreateWithoutOfferInput {
  donors?: DonorCreateManyWithoutOfferItemsInput;
  plant: PlantCreateOneWithoutOfferItemsInput;
}

export interface OfferUpdateManyDataInput {
  name?: String;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface OfferItemUpdateManyWithoutDonorsInput {
  create?:
    | OfferItemCreateWithoutDonorsInput[]
    | OfferItemCreateWithoutDonorsInput;
  delete?: OfferItemWhereUniqueInput[] | OfferItemWhereUniqueInput;
  connect?: OfferItemWhereUniqueInput[] | OfferItemWhereUniqueInput;
  disconnect?: OfferItemWhereUniqueInput[] | OfferItemWhereUniqueInput;
  update?:
    | OfferItemUpdateWithWhereUniqueWithoutDonorsInput[]
    | OfferItemUpdateWithWhereUniqueWithoutDonorsInput;
  upsert?:
    | OfferItemUpsertWithWhereUniqueWithoutDonorsInput[]
    | OfferItemUpsertWithWhereUniqueWithoutDonorsInput;
  deleteMany?: OfferItemScalarWhereInput[] | OfferItemScalarWhereInput;
}

export interface UserCreateInput {
  email: String;
  password: String;
  name: String;
  role?: Role;
}

export interface OfferItemUpdateWithWhereUniqueWithoutDonorsInput {
  where: OfferItemWhereUniqueInput;
  data: OfferItemUpdateWithoutDonorsDataInput;
}

export interface DonorWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  number?: String;
  number_not?: String;
  number_in?: String[] | String;
  number_not_in?: String[] | String;
  number_lt?: String;
  number_lte?: String;
  number_gt?: String;
  number_gte?: String;
  number_contains?: String;
  number_not_contains?: String;
  number_starts_with?: String;
  number_not_starts_with?: String;
  number_ends_with?: String;
  number_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  offers_every?: OfferWhereInput;
  offers_some?: OfferWhereInput;
  offers_none?: OfferWhereInput;
  OfferItems_every?: OfferItemWhereInput;
  OfferItems_some?: OfferItemWhereInput;
  OfferItems_none?: OfferItemWhereInput;
  AND?: DonorWhereInput[] | DonorWhereInput;
  OR?: DonorWhereInput[] | DonorWhereInput;
  NOT?: DonorWhereInput[] | DonorWhereInput;
}

export interface OfferItemUpdateWithoutDonorsDataInput {
  offer?: OfferUpdateOneRequiredWithoutItemsInput;
  plant?: PlantUpdateOneRequiredWithoutOfferItemsInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  role?: Role;
  role_not?: Role;
  role_in?: Role[] | Role;
  role_not_in?: Role[] | Role;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface OfferUpdateOneRequiredWithoutItemsInput {
  create?: OfferCreateWithoutItemsInput;
  update?: OfferUpdateWithoutItemsDataInput;
  upsert?: OfferUpsertWithoutItemsInput;
  connect?: OfferWhereUniqueInput;
}

export interface OfferCreateWithoutDonorsInput {
  name: String;
  items?: OfferItemCreateManyWithoutOfferInput;
}

export interface OfferUpdateWithoutItemsDataInput {
  name?: String;
  donors?: DonorUpdateManyWithoutOffersInput;
}

export interface DonorSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: DonorWhereInput;
  AND?: DonorSubscriptionWhereInput[] | DonorSubscriptionWhereInput;
  OR?: DonorSubscriptionWhereInput[] | DonorSubscriptionWhereInput;
  NOT?: DonorSubscriptionWhereInput[] | DonorSubscriptionWhereInput;
}

export interface DonorUpsertWithWhereUniqueWithoutOffersInput {
  where: DonorWhereUniqueInput;
  update: DonorUpdateWithoutOffersDataInput;
  create: DonorCreateWithoutOffersInput;
}

export interface DonorUpdateWithoutOffersDataInput {
  number?: String;
  name?: String;
  OfferItems?: OfferItemUpdateManyWithoutDonorsInput;
}

export interface DonorUpdateWithWhereUniqueWithoutOffersInput {
  where: DonorWhereUniqueInput;
  data: DonorUpdateWithoutOffersDataInput;
}

export interface DonorUpdateManyWithoutOffersInput {
  create?: DonorCreateWithoutOffersInput[] | DonorCreateWithoutOffersInput;
  delete?: DonorWhereUniqueInput[] | DonorWhereUniqueInput;
  connect?: DonorWhereUniqueInput[] | DonorWhereUniqueInput;
  disconnect?: DonorWhereUniqueInput[] | DonorWhereUniqueInput;
  update?:
    | DonorUpdateWithWhereUniqueWithoutOffersInput[]
    | DonorUpdateWithWhereUniqueWithoutOffersInput;
  upsert?:
    | DonorUpsertWithWhereUniqueWithoutOffersInput[]
    | DonorUpsertWithWhereUniqueWithoutOffersInput;
  deleteMany?: DonorScalarWhereInput[] | DonorScalarWhereInput;
  updateMany?:
    | DonorUpdateManyWithWhereNestedInput[]
    | DonorUpdateManyWithWhereNestedInput;
}

export interface OfferItemUpdateWithoutPlantDataInput {
  offer?: OfferUpdateOneRequiredWithoutItemsInput;
  donors?: DonorUpdateManyWithoutOfferItemsInput;
}

export interface DonorCreateWithoutOfferItemsInput {
  number: String;
  name: String;
  offers?: OfferCreateManyWithoutDonorsInput;
}

export interface OfferCreateInput {
  name: String;
  donors?: DonorCreateManyWithoutOffersInput;
  items?: OfferItemCreateManyWithoutOfferInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  password: String;
  name: String;
  role: Role;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  role: () => Promise<Role>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<Role>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface OfferConnection {}

export interface OfferConnectionPromise
  extends Promise<OfferConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OfferEdge>>() => T;
  aggregate: <T = AggregateOfferPromise>() => T;
}

export interface OfferConnectionSubscription
  extends Promise<AsyncIterator<OfferConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OfferEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOfferSubscription>() => T;
}

export interface Offer {
  id: ID_Output;
  name: String;
}

export interface OfferPromise extends Promise<Offer>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  donors: <T = FragmentableArray<Donor>>(
    args?: {
      where?: DonorWhereInput;
      orderBy?: DonorOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  items: <T = FragmentableArray<OfferItem>>(
    args?: {
      where?: OfferItemWhereInput;
      orderBy?: OfferItemOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface OfferSubscription
  extends Promise<AsyncIterator<Offer>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  donors: <T = Promise<AsyncIterator<DonorSubscription>>>(
    args?: {
      where?: DonorWhereInput;
      orderBy?: DonorOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  items: <T = Promise<AsyncIterator<OfferItemSubscription>>>(
    args?: {
      where?: OfferItemWhereInput;
      orderBy?: OfferItemOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface AggregateDonor {
  count: Int;
}

export interface AggregateDonorPromise
  extends Promise<AggregateDonor>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDonorSubscription
  extends Promise<AsyncIterator<AggregateDonor>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface DonorEdge {
  cursor: String;
}

export interface DonorEdgePromise extends Promise<DonorEdge>, Fragmentable {
  node: <T = DonorPromise>() => T;
  cursor: () => Promise<String>;
}

export interface DonorEdgeSubscription
  extends Promise<AsyncIterator<DonorEdge>>,
    Fragmentable {
  node: <T = DonorSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PlantPreviousValues {
  id: ID_Output;
  name: String;
}

export interface PlantPreviousValuesPromise
  extends Promise<PlantPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface PlantPreviousValuesSubscription
  extends Promise<AsyncIterator<PlantPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface Plant {
  id: ID_Output;
  name: String;
}

export interface PlantPromise extends Promise<Plant>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  offerItems: <T = FragmentableArray<OfferItem>>(
    args?: {
      where?: OfferItemWhereInput;
      orderBy?: OfferItemOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface PlantSubscription
  extends Promise<AsyncIterator<Plant>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  offerItems: <T = Promise<AsyncIterator<OfferItemSubscription>>>(
    args?: {
      where?: OfferItemWhereInput;
      orderBy?: OfferItemOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserEdge {
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserConnection {}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface Donor {
  id: ID_Output;
  number: String;
  name: String;
}

export interface DonorPromise extends Promise<Donor>, Fragmentable {
  id: () => Promise<ID_Output>;
  number: () => Promise<String>;
  name: () => Promise<String>;
  offers: <T = FragmentableArray<Offer>>(
    args?: {
      where?: OfferWhereInput;
      orderBy?: OfferOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  OfferItems: <T = FragmentableArray<OfferItem>>(
    args?: {
      where?: OfferItemWhereInput;
      orderBy?: OfferItemOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface DonorSubscription
  extends Promise<AsyncIterator<Donor>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  number: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  offers: <T = Promise<AsyncIterator<OfferSubscription>>>(
    args?: {
      where?: OfferWhereInput;
      orderBy?: OfferOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  OfferItems: <T = Promise<AsyncIterator<OfferItemSubscription>>>(
    args?: {
      where?: OfferItemWhereInput;
      orderBy?: OfferItemOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface User {
  id: ID_Output;
  email: String;
  password: String;
  name: String;
  role: Role;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  role: () => Promise<Role>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<Role>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PlantSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface PlantSubscriptionPayloadPromise
  extends Promise<PlantSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PlantPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PlantPreviousValuesPromise>() => T;
}

export interface PlantSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PlantSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PlantSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PlantPreviousValuesSubscription>() => T;
}

export interface PlantEdge {
  cursor: String;
}

export interface PlantEdgePromise extends Promise<PlantEdge>, Fragmentable {
  node: <T = PlantPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PlantEdgeSubscription
  extends Promise<AsyncIterator<PlantEdge>>,
    Fragmentable {
  node: <T = PlantSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface DonorSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface DonorSubscriptionPayloadPromise
  extends Promise<DonorSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DonorPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DonorPreviousValuesPromise>() => T;
}

export interface DonorSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DonorSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DonorSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DonorPreviousValuesSubscription>() => T;
}

export interface AggregateOfferItem {
  count: Int;
}

export interface AggregateOfferItemPromise
  extends Promise<AggregateOfferItem>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOfferItemSubscription
  extends Promise<AsyncIterator<AggregateOfferItem>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface DonorPreviousValues {
  id: ID_Output;
  number: String;
  name: String;
}

export interface DonorPreviousValuesPromise
  extends Promise<DonorPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  number: () => Promise<String>;
  name: () => Promise<String>;
}

export interface DonorPreviousValuesSubscription
  extends Promise<AsyncIterator<DonorPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  number: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface OfferItemConnection {}

export interface OfferItemConnectionPromise
  extends Promise<OfferItemConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OfferItemEdge>>() => T;
  aggregate: <T = AggregateOfferItemPromise>() => T;
}

export interface OfferItemConnectionSubscription
  extends Promise<AsyncIterator<OfferItemConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OfferItemEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOfferItemSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface OfferEdge {
  cursor: String;
}

export interface OfferEdgePromise extends Promise<OfferEdge>, Fragmentable {
  node: <T = OfferPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OfferEdgeSubscription
  extends Promise<AsyncIterator<OfferEdge>>,
    Fragmentable {
  node: <T = OfferSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface OfferSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface OfferSubscriptionPayloadPromise
  extends Promise<OfferSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OfferPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OfferPreviousValuesPromise>() => T;
}

export interface OfferSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OfferSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OfferSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OfferPreviousValuesSubscription>() => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface PlantConnection {}

export interface PlantConnectionPromise
  extends Promise<PlantConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PlantEdge>>() => T;
  aggregate: <T = AggregatePlantPromise>() => T;
}

export interface PlantConnectionSubscription
  extends Promise<AsyncIterator<PlantConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PlantEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePlantSubscription>() => T;
}

export interface OfferItemPreviousValues {
  id: ID_Output;
}

export interface OfferItemPreviousValuesPromise
  extends Promise<OfferItemPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface OfferItemPreviousValuesSubscription
  extends Promise<AsyncIterator<OfferItemPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface OfferItemSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface OfferItemSubscriptionPayloadPromise
  extends Promise<OfferItemSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OfferItemPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OfferItemPreviousValuesPromise>() => T;
}

export interface OfferItemSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OfferItemSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OfferItemSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OfferItemPreviousValuesSubscription>() => T;
}

export interface DonorConnection {}

export interface DonorConnectionPromise
  extends Promise<DonorConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DonorEdge>>() => T;
  aggregate: <T = AggregateDonorPromise>() => T;
}

export interface DonorConnectionSubscription
  extends Promise<AsyncIterator<DonorConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DonorEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDonorSubscription>() => T;
}

export interface OfferPreviousValues {
  id: ID_Output;
  name: String;
}

export interface OfferPreviousValuesPromise
  extends Promise<OfferPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface OfferPreviousValuesSubscription
  extends Promise<AsyncIterator<OfferPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface OfferItemEdge {
  cursor: String;
}

export interface OfferItemEdgePromise
  extends Promise<OfferItemEdge>,
    Fragmentable {
  node: <T = OfferItemPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OfferItemEdgeSubscription
  extends Promise<AsyncIterator<OfferItemEdge>>,
    Fragmentable {
  node: <T = OfferItemSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePlant {
  count: Int;
}

export interface AggregatePlantPromise
  extends Promise<AggregatePlant>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePlantSubscription
  extends Promise<AsyncIterator<AggregatePlant>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface OfferItem {
  id: ID_Output;
}

export interface OfferItemPromise extends Promise<OfferItem>, Fragmentable {
  id: () => Promise<ID_Output>;
  offer: <T = OfferPromise>() => T;
  donors: <T = FragmentableArray<Donor>>(
    args?: {
      where?: DonorWhereInput;
      orderBy?: DonorOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  plant: <T = PlantPromise>() => T;
}

export interface OfferItemSubscription
  extends Promise<AsyncIterator<OfferItem>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  offer: <T = OfferSubscription>() => T;
  donors: <T = Promise<AsyncIterator<DonorSubscription>>>(
    args?: {
      where?: DonorWhereInput;
      orderBy?: DonorOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  plant: <T = PlantSubscription>() => T;
}

export interface AggregateOffer {
  count: Int;
}

export interface AggregateOfferPromise
  extends Promise<AggregateOffer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOfferSubscription
  extends Promise<AsyncIterator<AggregateOffer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models = [
  {
    name: "Donor",
    embedded: false
  },
  {
    name: "Offer",
    embedded: false
  },
  {
    name: "OfferItem",
    embedded: false
  },
  {
    name: "Plant",
    embedded: false
  },
  {
    name: "Role",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:9001`,
  secret: `${process.env["PRISMA_SECRET"]}`
});
export const prisma = new Prisma();
